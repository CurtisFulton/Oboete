// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oboete.Database;

namespace Oboete.Database.Migrations
{
    [DbContext(typeof(OboeteContext))]
    [Migration("20180611120819_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Oboete.Database.Entity.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreateDateTime")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("DocumentName");

                    b.Property<string>("FileName")
                        .HasMaxLength(75);

                    b.Property<DateTimeOffset>("ModifiedDateTime");

                    b.HasKey("DocumentId");

                    b.ToTable("Document");

                    b.HasData(
                        new { DocumentId = 1, CreateDateTime = new DateTimeOffset(new DateTime(2018, 6, 11, 12, 8, 18, 671, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), DocumentName = new Guid("f0c4c8f8-c080-4d31-b7e1-527491f87b0f"), FileName = "TestDocument.text", ModifiedDateTime = new DateTimeOffset(new DateTime(2018, 6, 11, 12, 8, 18, 671, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)) }
                    );
                });

            modelBuilder.Entity("Oboete.Database.Entity.Flashcard", b =>
                {
                    b.Property<int>("FlashCardId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreateDateTime")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("EaseFactor");

                    b.Property<int>("FlashcardTypeId");

                    b.Property<int>("IntervalIndex");

                    b.Property<DateTimeOffset>("LastReviewDateTime");

                    b.Property<DateTimeOffset>("ModifiedDateTime");

                    b.Property<DateTimeOffset>("NextReviewDateTime");

                    b.Property<int>("NoteId");

                    b.HasKey("FlashCardId");

                    b.HasIndex("FlashcardTypeId");

                    b.HasIndex("NoteId");

                    b.ToTable("Flashcard");
                });

            modelBuilder.Entity("Oboete.Database.Entity.FlashcardType", b =>
                {
                    b.Property<int>("FlashcardTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FlashcardTypeName");

                    b.HasKey("FlashcardTypeId");

                    b.ToTable("FlashcardType");

                    b.HasData(
                        new { FlashcardTypeId = 1, FlashcardTypeName = "Kana Recognition" },
                        new { FlashcardTypeId = 2, FlashcardTypeName = "Kana Production" }
                    );
                });

            modelBuilder.Entity("Oboete.Database.Entity.Note", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreateDateTime")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EnglishMeaning");

                    b.Property<string>("ExampleSentenceEnglish");

                    b.Property<string>("ExampleSentenceJapanese");

                    b.Property<string>("Kana");

                    b.Property<string>("Kanji");

                    b.Property<DateTimeOffset>("ModifiedDateTime");

                    b.Property<int?>("NoteTypeId");

                    b.Property<int>("WordAudioDocumentId");

                    b.HasKey("NoteId");

                    b.HasIndex("NoteTypeId");

                    b.HasIndex("WordAudioDocumentId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("Oboete.Database.Entity.NoteType", b =>
                {
                    b.Property<int>("NoteTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NoteTypeName");

                    b.HasKey("NoteTypeId");

                    b.ToTable("NoteType");

                    b.HasData(
                        new { NoteTypeId = 1, NoteTypeName = "Vocab" },
                        new { NoteTypeId = 2, NoteTypeName = "Grammar" }
                    );
                });

            modelBuilder.Entity("Oboete.Database.Entity.Flashcard", b =>
                {
                    b.HasOne("Oboete.Database.Entity.FlashcardType", "FlashcardType")
                        .WithMany("Flashcards")
                        .HasForeignKey("FlashcardTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Oboete.Database.Entity.Note", "Note")
                        .WithMany("FlashCard")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Oboete.Database.Entity.Note", b =>
                {
                    b.HasOne("Oboete.Database.Entity.NoteType")
                        .WithMany("Notes")
                        .HasForeignKey("NoteTypeId");

                    b.HasOne("Oboete.Database.Entity.Document", "WordAudioDocument")
                        .WithMany("Notes")
                        .HasForeignKey("WordAudioDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
