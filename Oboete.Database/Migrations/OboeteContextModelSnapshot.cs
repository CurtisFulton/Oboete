// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oboete.Database;

namespace Oboete.Database.Migrations
{
    [DbContext(typeof(OboeteContext))]
    partial class OboeteContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Oboete.Database.Entity.Deck", b =>
                {
                    b.Property<int>("DeckID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedDateTime")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DeckName")
                        .IsRequired();

                    b.Property<DateTimeOffset>("ModifiedDateTime");

                    b.Property<int>("OboeteUserID");

                    b.HasKey("DeckID");

                    b.HasIndex("DeckName")
                        .IsUnique();

                    b.HasIndex("OboeteUserID");

                    b.ToTable("Deck");

                    b.HasData(
                        new { DeckID = 1, CreatedDateTime = new DateTimeOffset(new DateTime(2018, 6, 30, 13, 9, 8, 288, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), DeckName = "Default Deck", ModifiedDateTime = new DateTimeOffset(new DateTime(2018, 6, 30, 13, 9, 8, 288, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), OboeteUserID = 1 }
                    );
                });

            modelBuilder.Entity("Oboete.Database.Entity.Flashcard", b =>
                {
                    b.Property<int>("FlashCardID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedDateTime")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("EaseFactor");

                    b.Property<int>("FlashcardTemplateID");

                    b.Property<int>("IntervalIndex");

                    b.Property<DateTimeOffset>("LastReviewDateTime");

                    b.Property<DateTimeOffset>("ModifiedDateTime");

                    b.Property<DateTimeOffset>("NextReviewDateTime");

                    b.Property<int>("NoteID");

                    b.HasKey("FlashCardID");

                    b.HasIndex("FlashcardTemplateID");

                    b.HasIndex("NoteID");

                    b.ToTable("Flashcard");
                });

            modelBuilder.Entity("Oboete.Database.Entity.FlashcardTemplate", b =>
                {
                    b.Property<int>("FlashcardTemplateID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CardBackTemplate");

                    b.Property<string>("CardFrontTemplate");

                    b.Property<string>("CardStyling");

                    b.Property<DateTimeOffset>("CreatedDateTime")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FlashcardTemplateName")
                        .IsRequired();

                    b.Property<DateTimeOffset>("ModifiedDateTime");

                    b.Property<int>("NoteTypeID");

                    b.HasKey("FlashcardTemplateID");

                    b.HasIndex("NoteTypeID", "FlashcardTemplateName")
                        .IsUnique();

                    b.ToTable("FlashcardTemplate");

                    b.HasData(
                        new { FlashcardTemplateID = 1, CardBackTemplate = "{{Back}}", CardFrontTemplate = "{{Front}}", CardStyling = "", CreatedDateTime = new DateTimeOffset(new DateTime(2018, 6, 30, 13, 9, 8, 289, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), FlashcardTemplateName = "Default Flashcard", ModifiedDateTime = new DateTimeOffset(new DateTime(2018, 6, 30, 13, 9, 8, 289, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), NoteTypeID = 1 }
                    );
                });

            modelBuilder.Entity("Oboete.Database.Entity.Note", b =>
                {
                    b.Property<int>("NoteID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedDateTime")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DeckID");

                    b.Property<DateTimeOffset>("ModifiedDateTime");

                    b.Property<int>("NoteTypeID");

                    b.HasKey("NoteID");

                    b.HasIndex("DeckID");

                    b.HasIndex("NoteTypeID");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("Oboete.Database.Entity.NoteFieldValue", b =>
                {
                    b.Property<int>("NoteFieldValueId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedDateTime")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("ModifiedDateTime");

                    b.Property<int>("NoteId");

                    b.Property<int>("NoteTypeFieldDefinitionId");

                    b.Property<string>("NoteValue");

                    b.HasKey("NoteFieldValueId");

                    b.HasIndex("NoteId");

                    b.HasIndex("NoteTypeFieldDefinitionId");

                    b.ToTable("NoteFieldValue");
                });

            modelBuilder.Entity("Oboete.Database.Entity.NoteType", b =>
                {
                    b.Property<int>("NoteTypeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NoteTypeName")
                        .IsRequired();

                    b.Property<int>("OboeteUserID");

                    b.HasKey("NoteTypeID");

                    b.HasIndex("NoteTypeName")
                        .IsUnique();

                    b.HasIndex("OboeteUserID");

                    b.ToTable("NoteType");

                    b.HasData(
                        new { NoteTypeID = 1, NoteTypeName = "Default Note", OboeteUserID = 1 }
                    );
                });

            modelBuilder.Entity("Oboete.Database.Entity.NoteTypeFieldDefinition", b =>
                {
                    b.Property<int>("NoteTypeFieldDefinitionID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedDateTime")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("ModifiedDateTime");

                    b.Property<string>("NoteFieldDisplay")
                        .IsRequired();

                    b.Property<string>("NoteFieldName")
                        .IsRequired();

                    b.Property<int>("NoteTypeID");

                    b.Property<int>("SequenceID");

                    b.HasKey("NoteTypeFieldDefinitionID");

                    b.HasIndex("NoteTypeID", "NoteFieldName")
                        .IsUnique();

                    b.HasIndex("NoteTypeID", "SequenceID")
                        .IsUnique();

                    b.ToTable("NoteTypeFieldDefinition");

                    b.HasData(
                        new { NoteTypeFieldDefinitionID = 1, CreatedDateTime = new DateTimeOffset(new DateTime(2018, 6, 30, 13, 9, 8, 289, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModifiedDateTime = new DateTimeOffset(new DateTime(2018, 6, 30, 13, 9, 8, 289, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), NoteFieldDisplay = "Front", NoteFieldName = "Front", NoteTypeID = 1, SequenceID = 1 },
                        new { NoteTypeFieldDefinitionID = 2, CreatedDateTime = new DateTimeOffset(new DateTime(2018, 6, 30, 13, 9, 8, 289, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), ModifiedDateTime = new DateTimeOffset(new DateTime(2018, 6, 30, 13, 9, 8, 289, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), NoteFieldDisplay = "Back", NoteFieldName = "Back", NoteTypeID = 1, SequenceID = 2 }
                    );
                });

            modelBuilder.Entity("Oboete.Database.Entity.OboeteUser", b =>
                {
                    b.Property<int>("OboeteUserID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedDateTime")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<bool>("IsEmailConfirmed");

                    b.Property<DateTimeOffset?>("LockoutEndDateTime");

                    b.Property<int>("LoginFailedCount");

                    b.Property<DateTimeOffset>("ModifiedDateTime");

                    b.Property<string>("PasswordHash")
                        .IsRequired();

                    b.Property<Guid>("SecurityStamp");

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("OboeteUserID");

                    b.ToTable("OboeteUser");

                    b.HasData(
                        new { OboeteUserID = 1, CreatedDateTime = new DateTimeOffset(new DateTime(2018, 6, 30, 13, 9, 8, 286, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Email = "Curtis.R.Fulton@Gmail.com", IsEmailConfirmed = false, LoginFailedCount = 0, ModifiedDateTime = new DateTimeOffset(new DateTime(2018, 6, 30, 13, 9, 8, 286, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), PasswordHash = "$2y$12$nu0WVC4LHuf1kbAKTNQQ8ueIQmW5dWEXhatBPz5xvPvVzpJx6Qmm2", SecurityStamp = new Guid("f98a09ce-ff28-4d21-853b-a9dc83f2f7c8"), UserName = "Temp User" }
                    );
                });

            modelBuilder.Entity("Oboete.Database.Entity.OboeteUserLoginToken", b =>
                {
                    b.Property<int>("OboeteUserLoginTokenID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedDateTime")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("Expires");

                    b.Property<Guid>("LoginSelector");

                    b.Property<DateTimeOffset>("ModifiedDateTime");

                    b.Property<int>("OboeteUserID");

                    b.Property<string>("TokenHash");

                    b.HasKey("OboeteUserLoginTokenID");

                    b.HasIndex("OboeteUserID");

                    b.ToTable("OboeteUserLoginToken");
                });

            modelBuilder.Entity("Oboete.Database.Entity.Deck", b =>
                {
                    b.HasOne("Oboete.Database.Entity.OboeteUser", "OboeteUser")
                        .WithMany()
                        .HasForeignKey("OboeteUserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Oboete.Database.Entity.Flashcard", b =>
                {
                    b.HasOne("Oboete.Database.Entity.FlashcardTemplate", "FlashcardTemplate")
                        .WithMany()
                        .HasForeignKey("FlashcardTemplateID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Oboete.Database.Entity.Note", "Note")
                        .WithMany("Flashcards")
                        .HasForeignKey("NoteID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Oboete.Database.Entity.FlashcardTemplate", b =>
                {
                    b.HasOne("Oboete.Database.Entity.NoteType", "NoteType")
                        .WithMany("FlashcardTemplates")
                        .HasForeignKey("NoteTypeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Oboete.Database.Entity.Note", b =>
                {
                    b.HasOne("Oboete.Database.Entity.Deck", "Deck")
                        .WithMany("Notes")
                        .HasForeignKey("DeckID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Oboete.Database.Entity.NoteType", "NoteType")
                        .WithMany()
                        .HasForeignKey("NoteTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Oboete.Database.Entity.NoteFieldValue", b =>
                {
                    b.HasOne("Oboete.Database.Entity.Note", "Note")
                        .WithMany("NoteValues")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Oboete.Database.Entity.NoteTypeFieldDefinition", "NoteTypeFieldDefinition")
                        .WithMany()
                        .HasForeignKey("NoteTypeFieldDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Oboete.Database.Entity.NoteType", b =>
                {
                    b.HasOne("Oboete.Database.Entity.OboeteUser", "OboeteUser")
                        .WithMany()
                        .HasForeignKey("OboeteUserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Oboete.Database.Entity.NoteTypeFieldDefinition", b =>
                {
                    b.HasOne("Oboete.Database.Entity.NoteType", "NoteType")
                        .WithMany("NoteFields")
                        .HasForeignKey("NoteTypeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Oboete.Database.Entity.OboeteUserLoginToken", b =>
                {
                    b.HasOne("Oboete.Database.Entity.OboeteUser", "OboeteUser")
                        .WithMany()
                        .HasForeignKey("OboeteUserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
